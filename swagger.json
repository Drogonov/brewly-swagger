{
  "openapi": "3.0.0",
  "paths": {
    "/auth/local/signUp": {
      "post": {
        "operationId": "AuthController_signupLocal",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns status if successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Returns business top layer error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Sign up with email and password",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/local/verifyOTP": {
      "post": {
        "operationId": "AuthController_verifyOTP",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns access and refresh tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Returns business top layer error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Verify OTP and authenticate user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/local/resendOTP": {
      "post": {
        "operationId": "AuthController_resendOTP",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Returns business top layer error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Resend OTP and update it for user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/local/signIn": {
      "post": {
        "operationId": "AuthController_signinLocal",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns access and refresh tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Returns business top layer error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Sign in with email and password",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns status if successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Returns business top layer error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "refresh-token": []
          }
        ],
        "summary": "Log out from current session",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshTokens",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns new access and refresh tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Returns business top layer error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "refresh-token": []
          }
        ],
        "summary": "Refresh access and refresh tokens",
        "tags": [
          "Auth"
        ]
      }
    },
    "/company/get-user-companies": {
      "get": {
        "operationId": "CompanyController_getUserCompanies",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns user companies information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserCompaniesResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get user companies",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/delete": {
      "delete": {
        "operationId": "CompanyController_deleteCompany",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the action to delete company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Delete company",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/data": {
      "get": {
        "operationId": "CompanyController_getCompanyData",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns data of the company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompanyDataResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get company data",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/change-current": {
      "post": {
        "operationId": "CompanyController_changeCurrentCompany",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Change current company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Change current company",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/edit": {
      "post": {
        "operationId": "CompanyController_editCompany",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCompanyRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit or create if id is empty company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Edit or create company",
        "tags": [
          "Company"
        ]
      }
    },
    "/cupping/create": {
      "post": {
        "operationId": "CuppingController_getOnboarding",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCuppingRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Cupping with following DTO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessIdResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Cupping",
        "tags": [
          "Cupping"
        ]
      }
    },
    "/cupping/results": {
      "post": {
        "operationId": "CuppingController_getCuppingResult",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCuppingResultsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Cupping with following DTO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCuppingResultsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Cupping",
        "tags": [
          "Cupping"
        ]
      }
    },
    "/onboarding/page": {
      "post": {
        "operationId": "OnboardingController_getOnboarding",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a onboarding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Get Onboarding response",
        "tags": [
          "App"
        ]
      }
    },
    "/samples/create/type": {
      "post": {
        "operationId": "SamplesController_createSampleType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSampleTypeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns id of the sample type after creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessIdResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Sample Type",
        "tags": [
          "Samples"
        ]
      }
    },
    "/samples/create/item": {
      "post": {
        "operationId": "SamplesController_createSampleItem",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSampleItemRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns id of the sample item after creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessIdResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Sample Item",
        "tags": [
          "Samples"
        ]
      }
    },
    "/samples/create": {
      "post": {
        "operationId": "SamplesController_createSample",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSampleRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns DTO of the sample after creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Sample",
        "tags": [
          "Samples"
        ]
      }
    },
    "/samples/create/roasttype": {
      "post": {
        "operationId": "SamplesController_createCustomRoastType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoastTypeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns DTO of the roast type after creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoastTypeResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Custom Roast Type",
        "tags": [
          "Samples"
        ]
      }
    },
    "/samples/get/roasttypes": {
      "get": {
        "operationId": "SamplesController_getAvailiableRoastTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns DTO of the roast type after creation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoastTypeResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Custom Roast Type",
        "tags": [
          "Samples"
        ]
      }
    },
    "/samples/create/coffeetype": {
      "post": {
        "operationId": "SamplesController_createCustomCoffeeType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCoffeeTypeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns DTO of the coffee type after creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoffeeTypeResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Custom Coffee Type",
        "tags": [
          "Samples"
        ]
      }
    },
    "/samples/get/coffeetypes": {
      "get": {
        "operationId": "SamplesController_getAvailiableCoffeeTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns DTO of the coffee type after creation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CoffeeTypeResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Custom Coffee Type",
        "tags": [
          "Samples"
        ]
      }
    },
    "/samples/search/type": {
      "get": {
        "operationId": "SamplesController_searchForSampleType",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns DTO of the coffee types from library",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchSampleTypeResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Search for coffee type from library",
        "tags": [
          "Samples"
        ]
      }
    },
    "/samples/search/item": {
      "get": {
        "operationId": "SamplesController_searchForSampleItem",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns DTO of the coffee items from warehouse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchSampleTypeResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Search for coffee items from warehouse",
        "tags": [
          "Samples"
        ]
      }
    },
    "/settings/user": {
      "get": {
        "operationId": "SettingsController_getUserSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns detailed about availiable user settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserSettingsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get user settings",
        "tags": [
          "Settings"
        ]
      }
    },
    "/settings/save-cupping-settings": {
      "post": {
        "operationId": "SettingsController_saveDefaultCuppingSettings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDefaultCuppingSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Save new cupping settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Save default cupping settings",
        "tags": [
          "Settings"
        ]
      }
    },
    "/settings/get-cupping-settings": {
      "get": {
        "operationId": "SettingsController_getDefaultCuppingSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns current default cupping settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDefaultCuppingSettingsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get default cupping settings",
        "tags": [
          "Settings"
        ]
      }
    },
    "/settings/get-company-rules": {
      "get": {
        "operationId": "SettingsController_getCompanyRules",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns list of rules for user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompanyRulesResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get availiable rules for user to change",
        "tags": [
          "Settings"
        ]
      }
    },
    "/settings/save-company-rules": {
      "post": {
        "operationId": "SettingsController_saveCompanyRules",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveCompanyRulesRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Save list of changed fules by user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Save rules for the company",
        "tags": [
          "Settings"
        ]
      }
    },
    "/user/search": {
      "get": {
        "operationId": "UserController_searchUsers",
        "parameters": [
          {
            "name": "searchStr",
            "required": true,
            "in": "query",
            "schema": {
              "example": "Vlad Emeliyanov",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "example": "friendsList",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DTO with users search result array",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUsersResponseDto"
                }
              }
            }
          }
        },
        "summary": "Search for users",
        "tags": [
          "User"
        ]
      }
    },
    "/user/list": {
      "get": {
        "operationId": "UserController_getUsersList",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DTO with users list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUsersResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get Users list",
        "tags": [
          "User"
        ]
      }
    },
    "/user/get-card": {
      "get": {
        "operationId": "UserController_getUserCard",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "schema": {
              "example": 666,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "example": "friendsList",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DTO with user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserCardResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get User",
        "tags": [
          "User"
        ]
      }
    },
    "/user/info": {
      "get": {
        "operationId": "UserController_getUserInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns DTO of the current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get self User data",
        "tags": [
          "User"
        ]
      }
    },
    "/user/requests": {
      "get": {
        "operationId": "UserController_getUserSendedRequests",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns DTO of the requests sended by user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserSendedRequestsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get user sended requests",
        "tags": [
          "User"
        ]
      }
    },
    "/user/notifications": {
      "get": {
        "operationId": "UserController_getUserNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns DTO of the user notifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserNotificationsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get user notifications",
        "tags": [
          "User"
        ]
      }
    },
    "/user/action": {
      "post": {
        "operationId": "UserController_makeUserAction",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "schema": {
              "example": 666,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "example": "addToFriends",
              "type": "string"
            }
          },
          {
            "name": "switchIsOn",
            "required": true,
            "in": "query",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns status of user interaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Some action made by user",
        "tags": [
          "User"
        ]
      }
    },
    "/user/reject": {
      "post": {
        "operationId": "UserController_rejectUserSendedRequest",
        "parameters": [
          {
            "name": "requestId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns status of user request rejection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Reject user sended request",
        "tags": [
          "User"
        ]
      }
    },
    "/user/edit": {
      "post": {
        "operationId": "UserController_saveEditUser",
        "parameters": [
          {
            "name": "userName",
            "required": true,
            "in": "query",
            "schema": {
              "example": "Jon Wayne",
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": true,
            "in": "query",
            "schema": {
              "example": "test@test.com",
              "type": "string"
            }
          },
          {
            "name": "about",
            "required": true,
            "in": "query",
            "schema": {
              "example": "Some Info",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DTO with status of edit operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Edit user info",
        "tags": [
          "User"
        ]
      }
    }
  },
  "info": {
    "title": "App API",
    "description": "API documentation for the application",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "access-token": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      },
      "refresh-token": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "AuthRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The users email",
            "example": "test@test.com"
          },
          "password": {
            "type": "string",
            "description": "The users password",
            "example": "qqqqqqqq"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "StatusResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Successful"
          },
          "description": {
            "type": "string",
            "example": "Some text about status"
          }
        },
        "required": [
          "status"
        ]
      },
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "errorMsg": {
            "type": "string",
            "example": "This email isnt email please check it"
          },
          "errorSubCode": {
            "type": "string",
            "example": "INCORRECT_EMAIL"
          },
          "errorFields": {
            "description": "Array of fields with specified errors",
            "example": [
              {
                "fieldCode": "email",
                "errorMsg": "This email isnt email please check it"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "errorMsg",
          "errorSubCode",
          "errorFields"
        ]
      },
      "OTPRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The users email",
            "example": "test@test.com"
          },
          "otp": {
            "type": "string",
            "description": "The users password",
            "example": "666666"
          }
        },
        "required": [
          "email",
          "otp"
        ]
      },
      "TokensResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYW50b25AdmxlemtvLmNvbSIsImlhdCI6MTczMjA5MTI4NiwiZXhwIjoxNzMyMDkyMTg2fQ.V5_gB8StUKLlBTiBrMLHNvQiLx_e3gscSF6xUYsmQzc"
          },
          "refresh_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImVtYWlsIjoidGVzdDEyM0B0ZXN0LmNvbSIsImlhdCI6MTczMTkxNDg0NCwiZXhwIjoxNzMyNTE5NjQ0fQ.sj5t3EUFMDhai_t2xyzdNtKMVjNGTRhjQYNMZtwu0Xk"
          }
        },
        "required": [
          "access_token",
          "refresh_token"
        ]
      },
      "GetUserCompaniesResponseDto": {
        "type": "object",
        "properties": {
          "currentCompany": {
            "type": "object",
            "description": "Current company of the user"
          },
          "companies": {
            "description": "Other companies of the user",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "currentCompany",
          "companies"
        ]
      },
      "GetCompanyDataResponseDto": {
        "type": "object",
        "properties": {
          "companyInfo": {
            "type": "object",
            "description": "Info about Company"
          },
          "team": {
            "description": "Team of the company with all roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "companyInfo",
          "team"
        ]
      },
      "EditCompanyRequestDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "number",
            "example": 666
          },
          "companyName": {
            "type": "string",
            "example": "Some Name"
          }
        },
        "required": [
          "companyId",
          "companyName"
        ]
      },
      "CuppingSettingsRequestDto": {
        "type": "object",
        "properties": {
          "userdId": {
            "type": "number",
            "example": 666
          },
          "companyId": {
            "type": "number",
            "example": 666
          },
          "randomSamplesOrder": {
            "type": "boolean",
            "example": true
          },
          "openSampleNameCupping": {
            "type": "boolean",
            "example": true
          },
          "singleUserCupping": {
            "type": "boolean",
            "example": true
          },
          "inviteAllTeammates": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "userdId",
          "companyId",
          "randomSamplesOrder",
          "openSampleNameCupping",
          "singleUserCupping",
          "inviteAllTeammates"
        ]
      },
      "CreateCuppingRequestDto": {
        "type": "object",
        "properties": {
          "cuppingCreatorId": {
            "type": "number",
            "example": 666
          },
          "companyId": {
            "type": "number",
            "example": 666
          },
          "sampleItemsId": {
            "description": "IDs of sample items from warehouse witch are included to cupping",
            "example": [
              1,
              3,
              777
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "settings": {
            "description": "Cupping Settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/CuppingSettingsRequestDto"
              }
            ]
          },
          "invitedUsersId": {
            "description": "IDs of Users who will be invited to cupping",
            "example": [
              1,
              3,
              777
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cuppingName": {
            "type": "string",
            "example": "Cupping 1"
          }
        },
        "required": [
          "cuppingCreatorId",
          "companyId",
          "sampleItemsId",
          "settings",
          "invitedUsersId",
          "cuppingName"
        ]
      },
      "SuccessIdResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": "666"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetCuppingResultsRequestDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "example": 666
          },
          "companyId": {
            "type": "number",
            "example": 666
          },
          "cuppingId": {
            "type": "number",
            "example": 666
          }
        },
        "required": [
          "userId",
          "companyId",
          "cuppingId"
        ]
      },
      "GetCuppingResultsResponseDto": {
        "type": "object",
        "properties": {
          "cuppingId": {
            "type": "number",
            "description": "Id of the sample testing",
            "example": 666
          },
          "cuppingTimeInSeconds": {
            "type": "number",
            "description": "Id of the sample item from warehouse",
            "example": 666
          },
          "resultForSamples": {
            "description": "Sample name. Can be covered with placeholder to hide origin name",
            "example": "Sample 1",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "cuppingId",
          "cuppingTimeInSeconds",
          "resultForSamples"
        ]
      },
      "OnboardingResponseDto": {
        "type": "object",
        "properties": {
          "pages": {
            "description": "Страницы из которых состоит Онбоардинг",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "pages"
        ]
      },
      "CreateSampleTypeRequestDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "number",
            "example": 666
          },
          "companyName": {
            "type": "string",
            "example": "Tasty Coffee"
          },
          "sampleName": {
            "type": "string",
            "example": "Irgachiff 4"
          },
          "roastType": {
            "type": "string",
            "example": "Medium"
          },
          "coffeeType": {
            "type": "string",
            "example": "Blend"
          }
        },
        "required": [
          "companyId",
          "companyName",
          "sampleName",
          "roastType",
          "coffeeType"
        ]
      },
      "CreateSampleItemRequestDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "number",
            "example": 666
          },
          "roastDate": {
            "format": "date-time",
            "type": "string",
            "example": "20.12.2021"
          },
          "openDate": {
            "format": "date-time",
            "type": "string",
            "example": "26.12.2021"
          },
          "wheight": {
            "type": "number",
            "description": "Wheight in gramms",
            "example": 250
          },
          "barCode": {
            "type": "string",
            "example": "666666"
          }
        },
        "required": [
          "companyId",
          "roastDate",
          "openDate",
          "wheight",
          "barCode"
        ]
      },
      "CreateSampleRequestDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "number",
            "example": 666
          },
          "type": {
            "description": "Type describing sample",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSampleTypeRequestDto"
              }
            ]
          },
          "item": {
            "example": "Properties of current sample",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSampleItemRequestDto"
              }
            ]
          }
        },
        "required": [
          "companyId",
          "type",
          "item"
        ]
      },
      "SampleResponseDto": {
        "type": "object",
        "properties": {
          "sampleTypeId": {
            "type": "number",
            "example": "666"
          },
          "compnayName": {
            "type": "string",
            "example": "Tasty Coffee"
          },
          "sampleName": {
            "type": "string",
            "example": "Brazilia Cerrado"
          },
          "roastType": {
            "type": "string",
            "example": "Medium"
          },
          "coffeeType": {
            "type": "string",
            "example": "Blend"
          },
          "sampleItemId": {
            "type": "number",
            "example": "777"
          },
          "roastDate": {
            "type": "string",
            "example": "13.12.2021"
          },
          "openDate": {
            "type": "string",
            "example": "21.12.2021"
          },
          "wheight": {
            "type": "number",
            "description": "Wheight in gramms",
            "example": "250"
          },
          "barCode": {
            "type": "string",
            "example": "666777"
          }
        },
        "required": [
          "sampleTypeId",
          "compnayName",
          "sampleName",
          "roastType",
          "coffeeType",
          "sampleItemId",
          "roastDate",
          "openDate",
          "wheight",
          "barCode"
        ]
      },
      "CreateRoastTypeRequestDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "number",
            "example": 666
          },
          "value": {
            "type": "string",
            "example": "Natural"
          }
        },
        "required": [
          "companyId",
          "value"
        ]
      },
      "RoastTypeResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": "666"
          },
          "value": {
            "type": "string",
            "example": "Medium+"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "CreateCoffeeTypeRequestDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "number",
            "example": 666
          },
          "value": {
            "type": "string",
            "example": "Medium+"
          }
        },
        "required": [
          "companyId",
          "value"
        ]
      },
      "CoffeeTypeResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": "666"
          },
          "value": {
            "type": "string",
            "example": "Natural"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "SearchSampleTypeResponseDto": {
        "type": "object",
        "properties": {
          "sampleTypeId": {
            "type": "number",
            "example": "666"
          },
          "compnayName": {
            "type": "string",
            "example": "Tasty Coffee"
          },
          "sampleName": {
            "type": "string",
            "example": "Brazilia Cerrado"
          },
          "roastType": {
            "type": "string",
            "example": "Medium"
          },
          "coffeeType": {
            "type": "string",
            "example": "Blend"
          }
        },
        "required": [
          "sampleTypeId",
          "compnayName",
          "sampleName",
          "roastType",
          "coffeeType"
        ]
      },
      "GetUserSettingsResponseDto": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "object",
            "description": "User Information"
          },
          "companyInfo": {
            "type": "object",
            "description": "Company Information"
          },
          "friendsBlock": {
            "type": "object",
            "description": "Friends Info"
          },
          "teamMatesBlock": {
            "type": "object",
            "description": "Teammates Info"
          },
          "requestsBlock": {
            "type": "object",
            "description": "Sended requests"
          },
          "onboardingBlock": {
            "type": "object",
            "description": "Onboarding Info"
          }
        },
        "required": [
          "userInfo",
          "companyInfo"
        ]
      },
      "SaveDefaultCuppingSettingsRequestDto": {
        "type": "object",
        "properties": {
          "defaultCuppingName": {
            "type": "string",
            "example": "Cupping Name"
          },
          "randomSamplesOrder": {
            "type": "boolean",
            "example": true
          },
          "openSampleNameCupping": {
            "type": "boolean",
            "example": true
          },
          "singleUserCupping": {
            "type": "boolean",
            "example": true
          },
          "inviteAllTeammates": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "defaultCuppingName",
          "randomSamplesOrder",
          "openSampleNameCupping",
          "singleUserCupping",
          "inviteAllTeammates"
        ]
      },
      "GetDefaultCuppingSettingsResponseDto": {
        "type": "object",
        "properties": {
          "defaultCuppingName": {
            "type": "string",
            "description": "Default property to create new cupping with name",
            "example": "Cupping Name"
          },
          "randomSamplesOrder": {
            "type": "boolean",
            "description": "Will order for each user will be unique",
            "example": true
          },
          "openSampleNameCupping": {
            "type": "boolean",
            "description": "Sample names wont be hidden",
            "example": true
          },
          "singleUserCupping": {
            "type": "boolean",
            "description": "Is that cupping only for you?",
            "example": true
          },
          "inviteAllTeammates": {
            "type": "boolean",
            "description": "Invite all your team mates from current company",
            "example": true
          }
        },
        "required": [
          "randomSamplesOrder",
          "openSampleNameCupping",
          "singleUserCupping",
          "inviteAllTeammates"
        ]
      },
      "GetCompanyRulesResponseDto": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Company name"
          },
          "rulesForOwner": {
            "description": "Rules which owner add fo himself",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rulesForChief": {
            "description": "Rules for chief added by owner or other chiefs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rulesForBarista": {
            "description": "Rules for barista added by owner or chief",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "companyName",
          "rulesForOwner",
          "rulesForChief",
          "rulesForBarista"
        ]
      },
      "SaveCompanyRulesRequestDto": {
        "type": "object",
        "properties": {
          "rules": {
            "description": "Rules to save",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "rules"
        ]
      },
      "SearchUsersResponseDto": {
        "type": "object",
        "properties": {
          "users": {
            "description": "Array of users",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "users"
        ]
      },
      "GetUserCardResponseDto": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "object",
            "description": "Information about user"
          },
          "status": {
            "type": "string",
            "example": "Friend, teammate"
          },
          "actions": {
            "description": "user interaction actions",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "userInfo",
          "status",
          "actions"
        ]
      },
      "UserInfoResponseDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "example": 666
          },
          "userName": {
            "type": "string",
            "example": "John Wayne"
          },
          "userImageURL": {
            "type": "string",
            "description": "Image of the user",
            "example": "https://picsum.photos/seed/picsum/200/300"
          },
          "email": {
            "type": "string",
            "example": "test@test.com"
          },
          "role": {
            "type": "string",
            "description": "will be achieved if we provide company for user",
            "example": "barista"
          },
          "about": {
            "type": "string",
            "example": "Some info about user"
          }
        },
        "required": [
          "userId",
          "userName",
          "email",
          "role",
          "about"
        ]
      },
      "GetUserSendedRequestsResponseDto": {
        "type": "object",
        "properties": {
          "requests": {
            "description": "Array of requests",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "requests"
        ]
      },
      "GetUserNotificationsResponseDto": {
        "type": "object",
        "properties": {
          "notifications": {
            "description": "Array of requests",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "notifications"
        ]
      }
    }
  }
}